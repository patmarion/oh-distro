coordinate_frames {
  root_frame = "local";
  
  body {
    relative_to = "local";
    history = 2000;
    max_frequency = 1000;
    pose_update_channel = "POSE_BODY";
    initial_transform{
      translation = [ 0, 0, 0.14493 ];
      rpy = [0, 0, 0];
    }
  }
  utorso {
    relative_to = "body";
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [0, 0, 0];
    }
  }

  # 2016-11-02: wxm extracted from URDF
  imu {
    relative_to = "body";
    history = 2000;
    max_frequency = 100;
    update_channel = "BODY_TO_IMU";
    initial_transform{
      translation=[0.19, 0, 0.149];
      rpy = [0.0, -90.00021045914971, -179.9995790817006];
    }
  }

  # TODO: transform needs to be updated
  SICK_SCAN {
    relative_to = "body";
    history = 2000;
    max_frequency = 100;
    update_channel = "BODY_TO_SICK_SCAN";
    initial_transform{
      translation=[ 0.465, 0.0, 0.14 ];
      rpy = [ 0.00015203949571828212, -180.0, 180.0 ];
    }
  }

  # Extra frames required for SICK_SCAN to work without throwing
  # a ton of error messages (Director needs to fix vtkLidarSource.cxx)
  PRE_SPINDLE {
    relative_to = "SICK_SCAN";
    history = 5000;
    initial_transform{
      translation = [ 0.0, 0.0, 0.0 ];
      quat = [ 1,0,0,0 ];
    }
  }
  POST_SPINDLE {
    relative_to = "PRE_SPINDLE";
    history = 5000;
    initial_transform{
      translation = [ 0.0, 0.0, 0.0 ];
      quat = [ 1,0,0,0 ];
    }
  }

  # Taken from URDF via Director
  bumblebee2_bot {
    relative_to = "body";
    history = 2000;
    max_frequency = 100;
    update_channel = "BODY_TO_BUMBLEBEE2";
    initial_transform {
      translation = [0.365, -0.010999712608432716, 0.5508799999989443];
      rpy = [ 0, 0, 0 ];
    }
  }
  # Optical frame
  bumblebee2_bot_optical {
    relative_to = "bumblebee2_bot";
    history = 2000;
    update_channel = "BB_TO_BB_OPTICAL";
    initial_transform {
      translation = [ 0, 0, 0 ];
      # This axis is wrong, again
      # -270, 180, 90 was OK as well
      rpy = [ -90, 0, -90 ]; #[ -90, 0, -90 ];
    }
  }

  # Asus Xtion Free
  KINECT_RGB {
    relative_to = "bumblebee2_bot_optical";
    history = 2000;
    max_frequency = 10;
    update_channel = "BUMBLEBEE2_TO_XTION";
    initial_transform {
      # 2016-11-07: wxm calibrated approximately with box
      translation = [ -0.048, -0.03, 0 ];
      rpy = [ 0, 0, 0 ];
    }
  }

  OPENNI_FRAME_LEFT {
    relative_to = "bumblebee2";
    history = 2000;
    max_frequency = 100;
    update_channel = "BUMBLEBEE2_TO_OPENNI_FRAME_LEFT";
    initial_transform{
      # 2016-11-07: wxm calibrated approximately with box
      translation = [ 0, -0.048, 0.03 ];
      rpy = [ 86.0, 0.0, 92.0 ];
    }
  }
  OPENNI_FRAME_RIGHT {
    relative_to = "OPENNI_FRAME_LEFT";
    history = 2000;
    max_frequency = 100;
    update_channel = "OPENNI_FRAME_LEFT_TO_OPENNI_FRAME_RIGHT";
    initial_transform{
      # Needed for point cloud projection in director
      translation = [ 0, 0, 0 ];
      rpy = [ 0, 0, 0 ];
    }
  }

  # Rubbish bin to be tracked via AprilTags
  RUBBISH_BIN {
    relative_to = "KINECT_RGB";
    history = 2000;
    max_frequency = 60;
    update_channel = "CAMERA_TO_RUBBISH_BIN";
    initial_transform {
      translation = [ 0, 0, 0 ];
      rpy = [ 0, 0, 0 ];
    }
  }
}

planar_lidars {
  SICK_SCAN {
    viewer_color = [ 0.0, 1.0, 0.0 ]; # red
    max_range = 80.0;
    min_range = 0.1;
    frequency = 50;
    laser_type = "SICK";
    coord_frame = "SICK_SCAN";
    lcm_channel = "SICK_SCAN";
    surround_region = [0, 1000000];
    up_region = [-1,-1];
    down_region = [-1, -1];
    max_range_free_dist = 80.0;
  }
}

cameras {
  KINECT_RGB {
    lcm_channel = "KINECT_RGB";
    coord_frame = "KINECT_RGB";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [ 528.01442863461716, 528.01442863461716, 0, 321.06398107, 242.97676897 ]; # fx fy skew cx cy
    }
  }

  OPENNI_FRAME_LEFT {
    lcm_channel = "OPENNI_FRAME_LEFT";
    coord_frame = "OPENNI_FRAME_LEFT";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [0,0];
      pinhole = [ 528.01442863461716, 528.01442863461716, 0, 321.06398107, 242.97676897 ]; # fx fy skew cx cy
    }
  }
}
